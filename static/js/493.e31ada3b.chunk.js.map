{"version":3,"file":"static/js/493.e31ada3b.chunk.js","mappings":"4LAEO,SAASA,IACZ,OACI,gBAAKC,UAAU,SAAf,UACI,SAAC,KAAD,CACIC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,YACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIxB,C,gGCkCD,UA7Ca,WACT,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACNH,GAAW,IAEXI,EAAAA,EAAAA,IAAsBR,GACjBS,MAAK,SAAAC,GACF,IAAML,EAAOK,EAAKA,KAAKL,KAEvBC,EAAQD,EACX,IACAM,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EACf,IACAG,SAAQ,WACLX,GAAW,EACd,GACR,GAAE,CAACJ,KAGA,2BACKG,IAAW,SAAC,IAAD,KACC,IAAZA,GAAqC,IAAhBE,EAAKW,SAAgB,kEAC1CX,EAAKW,OAAS,IACX,SAAC,KAAD,UACKX,EAAKY,KAAI,WAAoCC,GAApC,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACN,UAAC,KAAD,WACKA,IAAgB,gBACbC,IAAKC,EAAAA,GAAqBF,EAC1BG,IAAK,SAAWL,EAChBhB,QAAQ,UAEZ,SAAC,KAAD,UAAWgB,KACX,UAAC,KAAD,yBAA2BC,OAPZF,EADb,QAe7B,C,8OC5CKO,EAAoB,kDACpBC,EAAmB,sCACnBC,EAAyB,uCAElBJ,EAAqB,kCACrBK,EAAqB,kCAI5BC,EAAe,IAAIC,gBAAgB,CACrCC,QAbY,mCAcZC,SAbiB,OAgBd,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACGC,EADH,UACYT,EADZ,YACiCI,GADjC,kBAGwBM,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMCvB,QAAQD,MAAR,MAND,gFAUA,SAAeyB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BrC,GAA9B,gFACGkC,EADH,UACYR,GADZ,OAC+B1B,EAD/B,YAC0C6B,GAD1C,kBAGwBM,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMCvB,QAAQD,MAAR,MAND,gFAUA,SAAeJ,EAAtB,+CAAO,OAAP,oBAAO,WAAqCR,GAArC,gFACGkC,EADH,UACYR,GADZ,OAC+B1B,EAD/B,oBACkD6B,GADlD,kBAGwBM,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMCvB,QAAQD,MAAR,MAND,gFAUA,SAAe0B,EAAtB,+CAAO,OAAP,oBAAO,WAAqCtC,GAArC,gFACGkC,EADH,UACYR,GADZ,OAC+B1B,EAD/B,oBACkD6B,GADlD,kBAGwBM,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMCvB,QAAQD,MAAR,MAND,gFAUA,SAAe2B,EAAtB,kC,aAAO,O,oBAAA,WAAkCC,GAAlC,gFACGN,EADH,UACYP,EADZ,kBAC4CE,EAD5C,kBACkEW,GADlE,kBAGwBL,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMCvB,QAAQD,MAAR,MAND,gF","sources":["components/Loader/Loader.jsx","pages/Cast.jsx","services/api.js"],"sourcesContent":["import { ThreeDots } from  'react-loader-spinner'\n\nexport function Loader() {\n    return (\n        <div className=\"Loader\">\n            <ThreeDots \n                height=\"80\" \n                width=\"80\" \n                radius=\"9\"\n                color=\"orangered\" \n                ariaLabel=\"three-dots-loading\"\n                wrapperStyle={{}}\n                wrapperClassName=\"\"\n                visible={true}\n            />\n        </div>\n    )\n};\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { getTmdbMovieIdCredits, baseImageTmdbURL_l } from \"services/api\"\nimport { CastList, CastListItem, CastName, CastCharacter } from \"components/App.styled\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [loading, setLoading] = useState(false);\n    const [cast, setCast] = useState([]);\n    \n    useEffect(() => {\n        setLoading(true);\n\n        getTmdbMovieIdCredits(movieId)\n            .then(data => {\n                const cast = data.data.cast;\n                //console.log('Cast', cast);\n                setCast(cast);\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [movieId]);\n\n    return (\n        <div>\n            {loading && <Loader />}\n            {loading === false && cast.length === 0 && <p>We don't have any cast for this movie.</p>}\n            {cast.length > 0 && \n                <CastList>\n                    {cast.map(({ name, character, profile_path }, index) => (\n                        <CastListItem key={index}>\n                            {profile_path && <img\n                                src={baseImageTmdbURL_l + profile_path}\n                                alt={\"photo \" + name}\n                                loading=\"lazy\"\n                            />}\n                            <CastName>{name}</CastName>\n                            <CastCharacter>Character: {character}</CastCharacter>\n                        </CastListItem>\n                    ))}\n                </CastList>\n            }\n        </div>\n    );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst API_KEY = \"952628f2e449efc757df6f6ed1cc0d2c\";// API (v3 auth) <<api_key>>\nconst API_LANGUAGE = 'en'\n\nconst baseThemoviedbURL = \"https://api.themoviedb.org/3/trending/movie/day\";\nconst baseTmdbMovieURL = \"https://api.themoviedb.org/3/movie/\";\nconst baseTmdbMovieSearchURL = \"https://api.themoviedb.org/3/search/\";\n\nexport const baseImageTmdbURL_l = \"https://image.tmdb.org/t/p/w200\";\nexport const baseImageTmdbURL_m = \"https://image.tmdb.org/t/p/w300\";\nexport const baseImageTmdbURL_h = \"https://image.tmdb.org/t/p/w500\";\n//\"https://image.tmdb.org/t/p/original\"\n\nconst searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    language: API_LANGUAGE,\n});\n\nexport async function getTmdbTrendingMovies() {\n    const url = `${baseThemoviedbURL}?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieId(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieIdCredits(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}/credits?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieIdReviews(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}/reviews?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieSearch(searchValue) {\n    const url = `${baseTmdbMovieSearchURL}/movie?${searchParams}&query=${searchValue}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n//https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n"],"names":["Loader","className","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","movieId","useParams","useState","loading","setLoading","cast","setCast","useEffect","getTmdbMovieIdCredits","then","data","catch","error","console","log","finally","length","map","index","name","character","profile_path","src","baseImageTmdbURL_l","alt","baseThemoviedbURL","baseTmdbMovieURL","baseTmdbMovieSearchURL","baseImageTmdbURL_m","searchParams","URLSearchParams","api_key","language","getTmdbTrendingMovies","url","axios","response","getTmdbMovieId","getTmdbMovieIdReviews","getTmdbMovieSearch","searchValue"],"sourceRoot":""}