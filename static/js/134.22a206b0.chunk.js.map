{"version":3,"file":"static/js/134.22a206b0.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { ThreeDots } from  'react-loader-spinner'\n\nexport function Loader() {\n    return (\n        <div className=\"Loader\">\n            <ThreeDots \n                height=\"80\" \n                width=\"80\" \n                radius=\"9\"\n                color=\"orangered\" \n                ariaLabel=\"three-dots-loading\"\n                wrapperStyle={{}}\n                wrapperClassName=\"\"\n                visible={true}\n            />\n        </div>\n    )\n};\n","import { useEffect, useState } from \"react\";\nimport { Link, useSearchParams } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { SearchFormInput, SearchFormButton, MovieList, MovieListItem } from \"components/App.styled\";\nimport { getTmdbMovieSearch } from \"services/api\";\n\nconst Movies = () => {\n    const [loading, setLoading] = useState(false);\n    const [movies, setMovies] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get(\"query\") ?? \"\";\n\n    const handleInputChange = event => {\n        setSearchValue(event.currentTarget.value);\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (searchValue.trim() !== '') {\n            //console.log('searchValue', searchValue);\n            setSearchParams({ query: searchValue });\n            // const form = event.currentTarget;\n            // setSearchParams({ query: form.elements.searchValue.value });\n            // form.reset();\n        }\n    }\n\n    useEffect(() => {\n        if (query === \"\") return;\n\n        setLoading(true);\n        getTmdbMovieSearch(query)\n            .then(data => {\n                const movies = data.data.results;\n                //console.log('Search', movies);\n                setMovies([...movies]);\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, [query]);\n\n    return (\n        <main>\n            <form className=\"SearchForm\" onSubmit={handleSubmit}>\n                <SearchFormInput\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search movie\"\n                    name=\"searchValue\"\n                    value={searchValue}\n                    onChange={handleInputChange}\n                />\n                <SearchFormButton type=\"submit\">\n                    Search\n                </SearchFormButton>\n            </form>\n            {loading && <Loader />}\n            {loading === false && movies.length === 0 && query !== \"\" &&\n                <p>We don't have any movie for this search.</p>}\n            {movies.length > 0 &&\n                <MovieList>\n                    {movies.map(({ id, title }) => (\n                        <MovieListItem key={id}>\n                            <Link to={`/movies/${id}`} state={{ from: `/movies?query=${query}` }}>\n                                {title}\n                            </Link>\n                        </MovieListItem>\n                    ))}\n                </MovieList>\n            }\n        </main>\n    );\n};\n\nexport default Movies;","import axios from \"axios\";\n\nconst API_KEY = \"952628f2e449efc757df6f6ed1cc0d2c\";// API (v3 auth) <<api_key>>\nconst API_LANGUAGE = 'en'\n\nconst baseThemoviedbURL = \"https://api.themoviedb.org/3/trending/movie/day\";\nconst baseTmdbMovieURL = \"https://api.themoviedb.org/3/movie/\";\nconst baseTmdbMovieSearchURL = \"https://api.themoviedb.org/3/search/\";\n\nexport const baseImageTmdbURL_l = \"https://image.tmdb.org/t/p/w200\";\nexport const baseImageTmdbURL_m = \"https://image.tmdb.org/t/p/w300\";\nexport const baseImageTmdbURL_h = \"https://image.tmdb.org/t/p/w500\";\n//\"https://image.tmdb.org/t/p/original\"\n\nconst searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    language: API_LANGUAGE,\n});\n\nexport async function getTmdbTrendingMovies() {\n    const url = `${baseThemoviedbURL}?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieId(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieIdCredits(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}/credits?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieIdReviews(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}/reviews?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieSearch(searchValue) {\n    const url = `${baseTmdbMovieSearchURL}/movie?${searchParams}&query=${searchValue}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n//https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n"],"names":["Loader","className","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","useState","loading","setLoading","movies","setMovies","searchValue","setSearchValue","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getTmdbMovieSearch","then","data","results","catch","error","console","log","finally","onSubmit","event","preventDefault","trim","type","autoComplete","autoFocus","placeholder","name","value","onChange","currentTarget","length","map","id","title","to","state","from","baseThemoviedbURL","baseTmdbMovieURL","baseTmdbMovieSearchURL","baseImageTmdbURL_l","baseImageTmdbURL_m","URLSearchParams","api_key","language","getTmdbTrendingMovies","url","axios","response","getTmdbMovieId","movieId","getTmdbMovieIdCredits","getTmdbMovieIdReviews"],"sourceRoot":""}