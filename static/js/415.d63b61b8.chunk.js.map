{"version":3,"file":"static/js/415.d63b61b8.chunk.js","mappings":"4LAEO,SAASA,IACZ,OACI,gBAAKC,UAAU,SAAf,UACI,SAAC,KAAD,CACIC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,YACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIxB,C,yGCyBD,UApCa,WACT,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACNH,GAAW,IAEXI,EAAAA,EAAAA,MACKC,MAAK,SAAAC,GACF,IAAML,EAASK,EAAKA,KAAKC,QAEzBL,GAAU,OAAID,GACjB,IACIO,OAAM,SAAAC,GACPC,QAAQC,IAAIF,EACf,IACIG,SAAQ,WACTZ,GAAW,EACd,GACR,GAAE,KAGC,6BACI,4CACA,SAAC,KAAD,UACKC,EAAOY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACR,SAAC,KAAD,WACI,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAArB,SAA4BC,KADZD,EADZ,MAMff,IAAW,SAAC,IAAD,MAGvB,C,8OCnCKkB,EAAoB,kDACpBC,EAAmB,sCACnBC,EAAyB,uCAElBC,EAAqB,kCACrBC,EAAqB,kCAI5BC,EAAe,IAAIC,gBAAgB,CACrCC,QAbY,mCAcZC,SAbiB,OAgBd,SAAerB,IAAtB,4CAAO,OAAP,oBAAO,6FACGsB,EADH,UACYT,EADZ,YACiCK,GADjC,kBAGwBK,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMClB,QAAQD,MAAR,MAND,gFAUA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,gFACGJ,EADH,UACYR,GADZ,OAC+BY,EAD/B,YAC0CR,GAD1C,kBAGwBK,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMClB,QAAQD,MAAR,MAND,gFAUA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAAqCD,GAArC,gFACGJ,EADH,UACYR,GADZ,OAC+BY,EAD/B,oBACkDR,GADlD,kBAGwBK,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMClB,QAAQD,MAAR,MAND,gFAUA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAAqCF,GAArC,gFACGJ,EADH,UACYR,GADZ,OAC+BY,EAD/B,oBACkDR,GADlD,kBAGwBK,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMClB,QAAQD,MAAR,MAND,gFAUA,SAAewB,EAAtB,kC,aAAO,O,oBAAA,WAAkCC,GAAlC,gFACGR,EADH,UACYP,EADZ,kBAC4CG,EAD5C,kBACkEY,GADlE,kBAGwBP,EAAAA,GAAAA,IAAUD,GAHlC,cAGOE,EAHP,yBAIQA,GAJR,gCAMClB,QAAQD,MAAR,MAND,gF","sources":["components/Loader/Loader.jsx","pages/Home.jsx","services/api.js"],"sourcesContent":["import { ThreeDots } from  'react-loader-spinner'\n\nexport function Loader() {\n    return (\n        <div className=\"Loader\">\n            <ThreeDots \n                height=\"80\" \n                width=\"80\" \n                radius=\"9\"\n                color=\"orangered\" \n                ariaLabel=\"three-dots-loading\"\n                wrapperStyle={{}}\n                wrapperClassName=\"\"\n                visible={true}\n            />\n        </div>\n    )\n};\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { MovieList, MovieListItem } from \"components/App.styled\";\nimport { getTmdbTrendingMovies } from \"services/api\"\n\nconst Home = () => {\n    const [loading, setLoading] = useState(false);\n    const [movies, setMovies] = useState([]);\n    \n    useEffect(() => {\n        setLoading(true);\n\n        getTmdbTrendingMovies()\n            .then(data => {\n                const movies = data.data.results;\n                //console.log('Movies', movies);\n                setMovies([...movies]);\n            })\n                .catch(error => {\n                console.log(error);\n            })\n                .finally(() => {\n                setLoading(false);\n            });\n    }, []);\n    \n    return (\n        <main>\n            <h1>Trending today</h1>\n            <MovieList>\n                {movies.map(({ id, title }) => (\n                    <MovieListItem key={id}>\n                        <Link to={`/movies/${id}`}>{title}</Link>\n                    </MovieListItem>\n                ))}\n            </MovieList>\n            {loading && <Loader />}\n        </main>\n    );\n};\n\nexport default Home;\n","import axios from \"axios\";\n\nconst API_KEY = \"952628f2e449efc757df6f6ed1cc0d2c\";// API (v3 auth) <<api_key>>\nconst API_LANGUAGE = 'en'\n\nconst baseThemoviedbURL = \"https://api.themoviedb.org/3/trending/movie/day\";\nconst baseTmdbMovieURL = \"https://api.themoviedb.org/3/movie/\";\nconst baseTmdbMovieSearchURL = \"https://api.themoviedb.org/3/search/\";\n\nexport const baseImageTmdbURL_l = \"https://image.tmdb.org/t/p/w200\";\nexport const baseImageTmdbURL_m = \"https://image.tmdb.org/t/p/w300\";\nexport const baseImageTmdbURL_h = \"https://image.tmdb.org/t/p/w500\";\n//\"https://image.tmdb.org/t/p/original\"\n\nconst searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    language: API_LANGUAGE,\n});\n\nexport async function getTmdbTrendingMovies() {\n    const url = `${baseThemoviedbURL}?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieId(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieIdCredits(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}/credits?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieIdReviews(movieId) {\n    const url = `${baseTmdbMovieURL}${movieId}/reviews?${searchParams}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nexport async function getTmdbMovieSearch(searchValue) {\n    const url = `${baseTmdbMovieSearchURL}/movie?${searchParams}&query=${searchValue}`;\n    try {\n        const response = await axios.get(url);\n        return response;\n    } catch (error) {\n        console.error(error);\n    }\n}\n//https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n"],"names":["Loader","className","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","useState","loading","setLoading","movies","setMovies","useEffect","getTmdbTrendingMovies","then","data","results","catch","error","console","log","finally","map","id","title","to","baseThemoviedbURL","baseTmdbMovieURL","baseTmdbMovieSearchURL","baseImageTmdbURL_l","baseImageTmdbURL_m","searchParams","URLSearchParams","api_key","language","url","axios","response","getTmdbMovieId","movieId","getTmdbMovieIdCredits","getTmdbMovieIdReviews","getTmdbMovieSearch","searchValue"],"sourceRoot":""}